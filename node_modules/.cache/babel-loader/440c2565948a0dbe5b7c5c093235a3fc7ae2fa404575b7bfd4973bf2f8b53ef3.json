{"ast":null,"code":"import { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id);\n  tempActor.deferred = true;\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n  }\n  return tempActor;\n}\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n}\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor };","map":{"version":3,"names":["toInvokeSource","mapContext","isMachine","provide","createNullActor","id","send","subscribe","unsubscribe","toJSON","createInvocableActor","invokeDefinition","machine","context","_event","_a","invokeSrc","src","serviceCreator","options","services","type","resolvedData","data","undefined","tempActor","createDeferredActor","meta","entity","deferred","state","withContext","initialState","isActor","item","e","isSpawnedActor"],"sources":["C:/PoC-FE/video-fsm-uno/node_modules/xstate/es/Actor.js"],"sourcesContent":["import { toInvokeSource, mapContext, isMachine } from './utils.js';\nimport { provide } from './serviceScope.js';\n\nfunction createNullActor(id) {\n  return {\n    id: id,\n    send: function () {\n      return void 0;\n    },\n    subscribe: function () {\n      return {\n        unsubscribe: function () {\n          return void 0;\n        }\n      };\n    },\n    toJSON: function () {\n      return {\n        id: id\n      };\n    }\n  };\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */\n\n\nfunction createInvocableActor(invokeDefinition, machine, context, _event) {\n  var _a;\n\n  var invokeSrc = toInvokeSource(invokeDefinition.src);\n  var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n  var resolvedData = invokeDefinition.data ? mapContext(invokeDefinition.data, context, _event) : undefined;\n  var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id);\n  tempActor.meta = invokeDefinition;\n  return tempActor;\n}\n\nfunction createDeferredActor(entity, id, data) {\n  var tempActor = createNullActor(id);\n  tempActor.deferred = true;\n\n  if (isMachine(entity)) {\n    // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n    tempActor.state = provide(undefined, function () {\n      return (data ? entity.withContext(data) : entity).initialState;\n    });\n  }\n\n  return tempActor;\n}\n\nfunction isActor(item) {\n  try {\n    return typeof item.send === 'function';\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isSpawnedActor(item) {\n  return isActor(item) && 'id' in item;\n}\n\nexport { createDeferredActor, createInvocableActor, createNullActor, isActor, isSpawnedActor };"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,EAAEC,SAAS,QAAQ,YAAY;AAClE,SAASC,OAAO,QAAQ,mBAAmB;AAE3C,SAASC,eAAeA,CAACC,EAAE,EAAE;EAC3B,OAAO;IACLA,EAAE,EAAEA,EAAE;IACNC,IAAI,EAAE,SAAAA,CAAA,EAAY;MAChB,OAAO,KAAK,CAAC;IACf,CAAC;IACDC,SAAS,EAAE,SAAAA,CAAA,EAAY;MACrB,OAAO;QACLC,WAAW,EAAE,SAAAA,CAAA,EAAY;UACvB,OAAO,KAAK,CAAC;QACf;MACF,CAAC;IACH,CAAC;IACDC,MAAM,EAAE,SAAAA,CAAA,EAAY;MAClB,OAAO;QACLJ,EAAE,EAAEA;MACN,CAAC;IACH;EACF,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASK,oBAAoBA,CAACC,gBAAgB,EAAEC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;EACxE,IAAIC,EAAE;EAEN,IAAIC,SAAS,GAAGhB,cAAc,CAACW,gBAAgB,CAACM,GAAG,CAAC;EACpD,IAAIC,cAAc,GAAG,CAACH,EAAE,GAAGH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACO,OAAO,CAACC,QAAQ,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,SAAS,CAACK,IAAI,CAAC;EAC9J,IAAIC,YAAY,GAAGX,gBAAgB,CAACY,IAAI,GAAGtB,UAAU,CAACU,gBAAgB,CAACY,IAAI,EAAEV,OAAO,EAAEC,MAAM,CAAC,GAAGU,SAAS;EACzG,IAAIC,SAAS,GAAGP,cAAc,GAAGQ,mBAAmB,CAACR,cAAc,EAAEP,gBAAgB,CAACN,EAAE,EAAEiB,YAAY,CAAC,GAAGlB,eAAe,CAACO,gBAAgB,CAACN,EAAE,CAAC;EAC9IoB,SAAS,CAACE,IAAI,GAAGhB,gBAAgB;EACjC,OAAOc,SAAS;AAClB;AAEA,SAASC,mBAAmBA,CAACE,MAAM,EAAEvB,EAAE,EAAEkB,IAAI,EAAE;EAC7C,IAAIE,SAAS,GAAGrB,eAAe,CAACC,EAAE,CAAC;EACnCoB,SAAS,CAACI,QAAQ,GAAG,IAAI;EAEzB,IAAI3B,SAAS,CAAC0B,MAAM,CAAC,EAAE;IACrB;IACAH,SAAS,CAACK,KAAK,GAAG3B,OAAO,CAACqB,SAAS,EAAE,YAAY;MAC/C,OAAO,CAACD,IAAI,GAAGK,MAAM,CAACG,WAAW,CAACR,IAAI,CAAC,GAAGK,MAAM,EAAEI,YAAY;IAChE,CAAC,CAAC;EACJ;EAEA,OAAOP,SAAS;AAClB;AAEA,SAASQ,OAAOA,CAACC,IAAI,EAAE;EACrB,IAAI;IACF,OAAO,OAAOA,IAAI,CAAC5B,IAAI,KAAK,UAAU;EACxC,CAAC,CAAC,OAAO6B,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF;AAEA,SAASC,cAAcA,CAACF,IAAI,EAAE;EAC5B,OAAOD,OAAO,CAACC,IAAI,CAAC,IAAI,IAAI,IAAIA,IAAI;AACtC;AAEA,SAASR,mBAAmB,EAAEhB,oBAAoB,EAAEN,eAAe,EAAE6B,OAAO,EAAEG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}