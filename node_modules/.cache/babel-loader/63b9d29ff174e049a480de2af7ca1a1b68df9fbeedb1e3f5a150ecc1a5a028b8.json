{"ast":null,"code":"'use strict';\n\nconst format = require('quick-format-unescaped');\nmodule.exports = pino;\nconst _console = pfGlobalThisOrFallback().console || {};\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n};\nfunction levelToValue(level, logger) {\n  return level === 'silent' ? Infinity : logger.levels.values[level];\n}\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs');\nconst hierarchySymbol = Symbol('pino.hierarchy');\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n};\nfunction appendChildLogger(parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  };\n  childLogger[hierarchySymbol] = newEntry;\n}\nfunction setupBaseLogFunctions(logger, levels, proto) {\n  const logFunctions = {};\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : _console[level] || _console[logFallbackMap[level] || 'log'] || noop;\n  });\n  logger[baseLogFunctionSymbol] = logFunctions;\n}\nfunction shouldSerialize(serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err';\n    });\n    return hasToFilter;\n  } else if (serialize === true) {\n    return Object.keys(serializers);\n  }\n  return false;\n}\nfunction pino(opts) {\n  opts = opts || {};\n  opts.browser = opts.browser || {};\n  const transmit = opts.browser.transmit;\n  if (transmit && typeof transmit.send !== 'function') {\n    throw Error('pino: transmit option must have a send function');\n  }\n  const proto = opts.browser.write || _console;\n  if (opts.browser.write) opts.browser.asObject = true;\n  const serializers = opts.serializers || {};\n  const serialize = shouldSerialize(opts.browser.serialize, serializers);\n  let stdErrSerialize = opts.browser.serialize;\n  if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf('!stdSerializers.err') > -1) stdErrSerialize = false;\n  const customLevels = Object.keys(opts.customLevels || {});\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels);\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto;\n    });\n  }\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent';\n  const level = opts.level || 'info';\n  const logger = Object.create(proto);\n  if (!logger.log) logger.log = noop;\n  setupBaseLogFunctions(logger, levels, proto);\n  // setup root hierarchy entry\n  appendChildLogger({}, logger);\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  });\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  });\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    formatters: opts.browser.formatters,\n    levels,\n    timestamp: getTimeFunction(opts)\n  };\n  logger.levels = getLevels(opts);\n  logger.level = level;\n  logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;\n  logger.serializers = serializers;\n  logger._serialize = serialize;\n  logger._stdErrSerialize = stdErrSerialize;\n  logger.child = child;\n  if (transmit) logger._logEvent = createLogEventShape();\n  function getLevelVal() {\n    return levelToValue(this.level, this);\n  }\n  function getLevel() {\n    return this._level;\n  }\n  function setLevel(level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level);\n    }\n    this._level = level;\n    set(this, setOpts, logger, 'error'); // <-- must stay first\n    set(this, setOpts, logger, 'fatal');\n    set(this, setOpts, logger, 'warn');\n    set(this, setOpts, logger, 'info');\n    set(this, setOpts, logger, 'debug');\n    set(this, setOpts, logger, 'trace');\n    customLevels.forEach(level => {\n      set(this, setOpts, logger, level);\n    });\n  }\n  function child(bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino');\n    }\n    childOptions = childOptions || {};\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers;\n    }\n    const childOptionsSerializers = childOptions.serializers;\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers);\n      var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;\n      delete bindings.serializers;\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);\n    }\n    function Child(parent) {\n      this._childLevel = (parent._childLevel | 0) + 1;\n\n      // make sure bindings are available in the `set` function\n      this.bindings = bindings;\n      if (childSerializers) {\n        this.serializers = childSerializers;\n        this._serialize = childSerialize;\n      }\n      if (transmit) {\n        this._logEvent = createLogEventShape([].concat(parent._logEvent.bindings, bindings));\n      }\n    }\n    Child.prototype = this;\n    const newLogger = new Child(this);\n\n    // must happen before the level is assigned\n    appendChildLogger(this, newLogger);\n    // required to actually initialize the logger functions for any given child\n    newLogger.level = this.level;\n    return newLogger;\n  }\n  return logger;\n}\nfunction getLevels(opts) {\n  const customLevels = opts.customLevels || {};\n  const values = Object.assign({}, pino.levels.values, customLevels);\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels));\n  return {\n    values,\n    labels\n  };\n}\nfunction invertObject(obj) {\n  const inverted = {};\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key;\n  });\n  return inverted;\n}\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n};\npino.stdSerializers = stdSerializers;\npino.stdTimeFunctions = Object.assign({}, {\n  nullTime,\n  epochTime,\n  unixTime,\n  isoTime\n});\nfunction getBindingChain(logger) {\n  const bindings = [];\n  if (logger.bindings) {\n    bindings.push(logger.bindings);\n  }\n\n  // traverse up the tree to get all bindings\n  let hierarchy = logger[hierarchySymbol];\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent;\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings);\n    }\n  }\n  return bindings.reverse();\n}\nfunction set(self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  Object.defineProperty(self, level, {\n    value: levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger) ? noop : rootLogger[baseLogFunctionSymbol][level],\n    writable: true,\n    enumerable: true,\n    configurable: true\n  });\n  if (!opts.transmit && self[level] === noop) {\n    return;\n  }\n\n  // make sure the log format is correct\n  self[level] = createWrap(self, opts, rootLogger, level);\n\n  // prepend bindings if it is not the root logger\n  const bindings = getBindingChain(self);\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return;\n  }\n  self[level] = prependBindingsInArguments(bindings, self[level]);\n}\nfunction prependBindingsInArguments(bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments]);\n  };\n}\nfunction createWrap(self, opts, rootLogger, level) {\n  return function (write) {\n    return function LOG() {\n      const ts = opts.timestamp();\n      const args = new Array(arguments.length);\n      const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i];\n      if (opts.serialize && !opts.transmit) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);\n      }\n      if (opts.asObject || opts.formatters) {\n        write.call(proto, asObject(this, level, args, ts, opts.formatters));\n      } else write.apply(proto, args);\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level;\n        const transmitValue = rootLogger.levels.values[transmitLevel];\n        const methodValue = rootLogger.levels.values[level];\n        if (methodValue < transmitValue) return;\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args);\n      }\n    };\n  }(self[baseLogFunctionSymbol][level]);\n}\nfunction asObject(logger, level, args, ts, formatters = {}) {\n  const {\n    level: levelFormatter,\n    log: logObjectFormatter = obj => obj\n  } = formatters;\n  const argsCloned = args.slice();\n  let msg = argsCloned[0];\n  const logObject = {};\n  if (ts) {\n    logObject.time = ts;\n  }\n  if (levelFormatter) {\n    const formattedLevel = levelFormatter(level, logger.levels.values[level]);\n    Object.assign(logObject, formattedLevel);\n  } else {\n    logObject.level = logger.levels.values[level];\n  }\n  let lvl = (logger._childLevel | 0) + 1;\n  if (lvl < 1) lvl = 1;\n  // deliberate, catching objects, arrays\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(logObject, argsCloned.shift());\n    }\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined;\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned);\n  if (msg !== undefined) logObject.msg = msg;\n  const formattedLogObject = logObjectFormatter(logObject);\n  return formattedLogObject;\n}\nfunction applySerializers(args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i]);\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i]) && serialize) {\n      for (const k in args[i]) {\n        if (serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k]);\n        }\n      }\n    }\n  }\n}\nfunction transmit(logger, opts, args) {\n  const send = opts.send;\n  const ts = opts.ts;\n  const methodLevel = opts.methodLevel;\n  const methodValue = opts.methodValue;\n  const val = opts.val;\n  const bindings = logger._logEvent.bindings;\n  applySerializers(args, logger._serialize || Object.keys(logger.serializers), logger.serializers, logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize);\n  logger._logEvent.ts = ts;\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1;\n  });\n  logger._logEvent.level.label = methodLevel;\n  logger._logEvent.level.value = methodValue;\n  send(methodLevel, logger._logEvent, val);\n  logger._logEvent = createLogEventShape(bindings);\n}\nfunction createLogEventShape(bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: {\n      label: '',\n      value: 0\n    }\n  };\n}\nfunction asErrValue(err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  };\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key];\n    }\n  }\n  return obj;\n}\nfunction getTimeFunction(opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp;\n  }\n  if (opts.timestamp === false) {\n    return nullTime;\n  }\n  return epochTime;\n}\nfunction mock() {\n  return {};\n}\nfunction passthrough(a) {\n  return a;\n}\nfunction noop() {}\nfunction nullTime() {\n  return false;\n}\nfunction epochTime() {\n  return Date.now();\n}\nfunction unixTime() {\n  return Math.round(Date.now() / 1000.0);\n}\nfunction isoTime() {\n  return new Date(Date.now()).toISOString();\n} // using Date.now() for testability\n\n/* eslint-disable */\n/* istanbul ignore next */\nfunction pfGlobalThisOrFallback() {\n  function defd(o) {\n    return typeof o !== 'undefined' && o;\n  }\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis;\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis;\n        return this.globalThis = this;\n      },\n      configurable: true\n    });\n    return globalThis;\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {};\n  }\n}\n/* eslint-enable */\n\nmodule.exports.default = pino;\nmodule.exports.pino = pino;","map":{"version":3,"names":["format","require","module","exports","pino","_console","pfGlobalThisOrFallback","console","stdSerializers","mapHttpRequest","mock","mapHttpResponse","wrapRequestSerializer","passthrough","wrapResponseSerializer","wrapErrorSerializer","req","res","err","asErrValue","errWithCause","levelToValue","level","logger","Infinity","levels","values","baseLogFunctionSymbol","Symbol","hierarchySymbol","logFallbackMap","error","fatal","warn","info","debug","trace","appendChildLogger","parentLogger","childLogger","newEntry","parent","setupBaseLogFunctions","proto","logFunctions","forEach","noop","shouldSerialize","serialize","serializers","Array","isArray","hasToFilter","filter","k","Object","keys","opts","browser","transmit","send","Error","write","asObject","stdErrSerialize","indexOf","customLevels","concat","enabled","disabled","create","log","defineProperty","get","getLevelVal","getLevel","set","setLevel","setOpts","formatters","timestamp","getTimeFunction","getLevels","setMaxListeners","getMaxListeners","emit","addListener","on","prependListener","once","prependOnceListener","removeListener","removeAllListeners","listeners","listenerCount","eventNames","flush","_serialize","_stdErrSerialize","child","_logEvent","createLogEventShape","_level","bindings","childOptions","childOptionsSerializers","childSerializers","assign","childSerialize","applySerializers","Child","_childLevel","prototype","newLogger","labels","invertObject","obj","inverted","key","stdTimeFunctions","nullTime","epochTime","unixTime","isoTime","getBindingChain","push","hierarchy","reverse","self","rootLogger","value","writable","enumerable","configurable","createWrap","length","prependBindingsInArguments","logFunc","apply","arguments","LOG","ts","args","getPrototypeOf","i","call","transmitLevel","transmitValue","methodValue","methodLevel","val","levelFormatter","logObjectFormatter","argsCloned","slice","msg","logObject","time","formattedLevel","lvl","shift","undefined","formattedLogObject","messages","arg","label","type","constructor","name","message","stack","a","Date","now","Math","round","toISOString","defd","o","globalThis","e","window","default"],"sources":["C:/PoC-FE/video-fsm-uno/node_modules/pino/browser.js"],"sourcesContent":["'use strict'\n\nconst format = require('quick-format-unescaped')\n\nmodule.exports = pino\n\nconst _console = pfGlobalThisOrFallback().console || {}\nconst stdSerializers = {\n  mapHttpRequest: mock,\n  mapHttpResponse: mock,\n  wrapRequestSerializer: passthrough,\n  wrapResponseSerializer: passthrough,\n  wrapErrorSerializer: passthrough,\n  req: mock,\n  res: mock,\n  err: asErrValue,\n  errWithCause: asErrValue\n}\nfunction levelToValue (level, logger) {\n  return level === 'silent'\n    ? Infinity\n    : logger.levels.values[level]\n}\nconst baseLogFunctionSymbol = Symbol('pino.logFuncs')\nconst hierarchySymbol = Symbol('pino.hierarchy')\n\nconst logFallbackMap = {\n  error: 'log',\n  fatal: 'error',\n  warn: 'error',\n  info: 'log',\n  debug: 'log',\n  trace: 'log'\n}\n\nfunction appendChildLogger (parentLogger, childLogger) {\n  const newEntry = {\n    logger: childLogger,\n    parent: parentLogger[hierarchySymbol]\n  }\n  childLogger[hierarchySymbol] = newEntry\n}\n\nfunction setupBaseLogFunctions (logger, levels, proto) {\n  const logFunctions = {}\n  levels.forEach(level => {\n    logFunctions[level] = proto[level] ? proto[level] : (_console[level] || _console[logFallbackMap[level] || 'log'] || noop)\n  })\n  logger[baseLogFunctionSymbol] = logFunctions\n}\n\nfunction shouldSerialize (serialize, serializers) {\n  if (Array.isArray(serialize)) {\n    const hasToFilter = serialize.filter(function (k) {\n      return k !== '!stdSerializers.err'\n    })\n    return hasToFilter\n  } else if (serialize === true) {\n    return Object.keys(serializers)\n  }\n\n  return false\n}\n\nfunction pino (opts) {\n  opts = opts || {}\n  opts.browser = opts.browser || {}\n\n  const transmit = opts.browser.transmit\n  if (transmit && typeof transmit.send !== 'function') { throw Error('pino: transmit option must have a send function') }\n\n  const proto = opts.browser.write || _console\n  if (opts.browser.write) opts.browser.asObject = true\n  const serializers = opts.serializers || {}\n  const serialize = shouldSerialize(opts.browser.serialize, serializers)\n  let stdErrSerialize = opts.browser.serialize\n\n  if (\n    Array.isArray(opts.browser.serialize) &&\n    opts.browser.serialize.indexOf('!stdSerializers.err') > -1\n  ) stdErrSerialize = false\n\n  const customLevels = Object.keys(opts.customLevels || {})\n  const levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace'].concat(customLevels)\n\n  if (typeof proto === 'function') {\n    levels.forEach(function (level) {\n      proto[level] = proto\n    })\n  }\n  if (opts.enabled === false || opts.browser.disabled) opts.level = 'silent'\n  const level = opts.level || 'info'\n  const logger = Object.create(proto)\n  if (!logger.log) logger.log = noop\n\n  setupBaseLogFunctions(logger, levels, proto)\n  // setup root hierarchy entry\n  appendChildLogger({}, logger)\n\n  Object.defineProperty(logger, 'levelVal', {\n    get: getLevelVal\n  })\n  Object.defineProperty(logger, 'level', {\n    get: getLevel,\n    set: setLevel\n  })\n\n  const setOpts = {\n    transmit,\n    serialize,\n    asObject: opts.browser.asObject,\n    formatters: opts.browser.formatters,\n    levels,\n    timestamp: getTimeFunction(opts)\n  }\n  logger.levels = getLevels(opts)\n  logger.level = level\n\n  logger.setMaxListeners = logger.getMaxListeners =\n  logger.emit = logger.addListener = logger.on =\n  logger.prependListener = logger.once =\n  logger.prependOnceListener = logger.removeListener =\n  logger.removeAllListeners = logger.listeners =\n  logger.listenerCount = logger.eventNames =\n  logger.write = logger.flush = noop\n  logger.serializers = serializers\n  logger._serialize = serialize\n  logger._stdErrSerialize = stdErrSerialize\n  logger.child = child\n\n  if (transmit) logger._logEvent = createLogEventShape()\n\n  function getLevelVal () {\n    return levelToValue(this.level, this)\n  }\n\n  function getLevel () {\n    return this._level\n  }\n  function setLevel (level) {\n    if (level !== 'silent' && !this.levels.values[level]) {\n      throw Error('unknown level ' + level)\n    }\n    this._level = level\n\n    set(this, setOpts, logger, 'error') // <-- must stay first\n    set(this, setOpts, logger, 'fatal')\n    set(this, setOpts, logger, 'warn')\n    set(this, setOpts, logger, 'info')\n    set(this, setOpts, logger, 'debug')\n    set(this, setOpts, logger, 'trace')\n\n    customLevels.forEach((level) => {\n      set(this, setOpts, logger, level)\n    })\n  }\n\n  function child (bindings, childOptions) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino')\n    }\n    childOptions = childOptions || {}\n    if (serialize && bindings.serializers) {\n      childOptions.serializers = bindings.serializers\n    }\n    const childOptionsSerializers = childOptions.serializers\n    if (serialize && childOptionsSerializers) {\n      var childSerializers = Object.assign({}, serializers, childOptionsSerializers)\n      var childSerialize = opts.browser.serialize === true\n        ? Object.keys(childSerializers)\n        : serialize\n      delete bindings.serializers\n      applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize)\n    }\n    function Child (parent) {\n      this._childLevel = (parent._childLevel | 0) + 1\n\n      // make sure bindings are available in the `set` function\n      this.bindings = bindings\n\n      if (childSerializers) {\n        this.serializers = childSerializers\n        this._serialize = childSerialize\n      }\n      if (transmit) {\n        this._logEvent = createLogEventShape(\n          [].concat(parent._logEvent.bindings, bindings)\n        )\n      }\n    }\n    Child.prototype = this\n    const newLogger = new Child(this)\n\n    // must happen before the level is assigned\n    appendChildLogger(this, newLogger)\n    // required to actually initialize the logger functions for any given child\n    newLogger.level = this.level\n\n    return newLogger\n  }\n  return logger\n}\n\nfunction getLevels (opts) {\n  const customLevels = opts.customLevels || {}\n\n  const values = Object.assign({}, pino.levels.values, customLevels)\n  const labels = Object.assign({}, pino.levels.labels, invertObject(customLevels))\n\n  return {\n    values,\n    labels\n  }\n}\n\nfunction invertObject (obj) {\n  const inverted = {}\n  Object.keys(obj).forEach(function (key) {\n    inverted[obj[key]] = key\n  })\n  return inverted\n}\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    10: 'trace',\n    20: 'debug',\n    30: 'info',\n    40: 'warn',\n    50: 'error',\n    60: 'fatal'\n  }\n}\n\npino.stdSerializers = stdSerializers\npino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime })\n\nfunction getBindingChain (logger) {\n  const bindings = []\n  if (logger.bindings) {\n    bindings.push(logger.bindings)\n  }\n\n  // traverse up the tree to get all bindings\n  let hierarchy = logger[hierarchySymbol]\n  while (hierarchy.parent) {\n    hierarchy = hierarchy.parent\n    if (hierarchy.logger.bindings) {\n      bindings.push(hierarchy.logger.bindings)\n    }\n  }\n\n  return bindings.reverse()\n}\n\nfunction set (self, opts, rootLogger, level) {\n  // override the current log functions with either `noop` or the base log function\n  Object.defineProperty(self, level, {\n    value: (levelToValue(self.level, rootLogger) > levelToValue(level, rootLogger)\n      ? noop\n      : rootLogger[baseLogFunctionSymbol][level]),\n    writable: true,\n    enumerable: true,\n    configurable: true\n  })\n\n  if (!opts.transmit && self[level] === noop) {\n    return\n  }\n\n  // make sure the log format is correct\n  self[level] = createWrap(self, opts, rootLogger, level)\n\n  // prepend bindings if it is not the root logger\n  const bindings = getBindingChain(self)\n  if (bindings.length === 0) {\n    // early exit in case for rootLogger\n    return\n  }\n  self[level] = prependBindingsInArguments(bindings, self[level])\n}\n\nfunction prependBindingsInArguments (bindings, logFunc) {\n  return function () {\n    return logFunc.apply(this, [...bindings, ...arguments])\n  }\n}\n\nfunction createWrap (self, opts, rootLogger, level) {\n  return (function (write) {\n    return function LOG () {\n      const ts = opts.timestamp()\n      const args = new Array(arguments.length)\n      const proto = (Object.getPrototypeOf && Object.getPrototypeOf(this) === _console) ? _console : this\n      for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n\n      if (opts.serialize && !opts.transmit) {\n        applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize)\n      }\n      if (opts.asObject || opts.formatters) {\n        write.call(proto, asObject(this, level, args, ts, opts.formatters))\n      } else write.apply(proto, args)\n\n      if (opts.transmit) {\n        const transmitLevel = opts.transmit.level || self._level\n        const transmitValue = rootLogger.levels.values[transmitLevel]\n        const methodValue = rootLogger.levels.values[level]\n        if (methodValue < transmitValue) return\n        transmit(this, {\n          ts,\n          methodLevel: level,\n          methodValue,\n          transmitLevel,\n          transmitValue: rootLogger.levels.values[opts.transmit.level || self._level],\n          send: opts.transmit.send,\n          val: levelToValue(self._level, rootLogger)\n        }, args)\n      }\n    }\n  })(self[baseLogFunctionSymbol][level])\n}\n\nfunction asObject (logger, level, args, ts, formatters = {}) {\n  const {\n    level: levelFormatter,\n    log: logObjectFormatter = (obj) => obj\n  } = formatters\n  const argsCloned = args.slice()\n  let msg = argsCloned[0]\n  const logObject = {}\n  if (ts) {\n    logObject.time = ts\n  }\n\n  if (levelFormatter) {\n    const formattedLevel = levelFormatter(level, logger.levels.values[level])\n    Object.assign(logObject, formattedLevel)\n  } else {\n    logObject.level = logger.levels.values[level]\n  }\n\n  let lvl = (logger._childLevel | 0) + 1\n  if (lvl < 1) lvl = 1\n  // deliberate, catching objects, arrays\n  if (msg !== null && typeof msg === 'object') {\n    while (lvl-- && typeof argsCloned[0] === 'object') {\n      Object.assign(logObject, argsCloned.shift())\n    }\n    msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined\n  } else if (typeof msg === 'string') msg = format(argsCloned.shift(), argsCloned)\n  if (msg !== undefined) logObject.msg = msg\n\n  const formattedLogObject = logObjectFormatter(logObject)\n  return formattedLogObject\n}\n\nfunction applySerializers (args, serialize, serializers, stdErrSerialize) {\n  for (const i in args) {\n    if (stdErrSerialize && args[i] instanceof Error) {\n      args[i] = pino.stdSerializers.err(args[i])\n    } else if (typeof args[i] === 'object' && !Array.isArray(args[i]) && serialize) {\n      for (const k in args[i]) {\n        if (serialize.indexOf(k) > -1 && k in serializers) {\n          args[i][k] = serializers[k](args[i][k])\n        }\n      }\n    }\n  }\n}\n\nfunction transmit (logger, opts, args) {\n  const send = opts.send\n  const ts = opts.ts\n  const methodLevel = opts.methodLevel\n  const methodValue = opts.methodValue\n  const val = opts.val\n  const bindings = logger._logEvent.bindings\n\n  applySerializers(\n    args,\n    logger._serialize || Object.keys(logger.serializers),\n    logger.serializers,\n    logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize\n  )\n\n  logger._logEvent.ts = ts\n  logger._logEvent.messages = args.filter(function (arg) {\n    // bindings can only be objects, so reference equality check via indexOf is fine\n    return bindings.indexOf(arg) === -1\n  })\n\n  logger._logEvent.level.label = methodLevel\n  logger._logEvent.level.value = methodValue\n\n  send(methodLevel, logger._logEvent, val)\n\n  logger._logEvent = createLogEventShape(bindings)\n}\n\nfunction createLogEventShape (bindings) {\n  return {\n    ts: 0,\n    messages: [],\n    bindings: bindings || [],\n    level: { label: '', value: 0 }\n  }\n}\n\nfunction asErrValue (err) {\n  const obj = {\n    type: err.constructor.name,\n    msg: err.message,\n    stack: err.stack\n  }\n  for (const key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key]\n    }\n  }\n  return obj\n}\n\nfunction getTimeFunction (opts) {\n  if (typeof opts.timestamp === 'function') {\n    return opts.timestamp\n  }\n  if (opts.timestamp === false) {\n    return nullTime\n  }\n  return epochTime\n}\n\nfunction mock () { return {} }\nfunction passthrough (a) { return a }\nfunction noop () {}\n\nfunction nullTime () { return false }\nfunction epochTime () { return Date.now() }\nfunction unixTime () { return Math.round(Date.now() / 1000.0) }\nfunction isoTime () { return new Date(Date.now()).toISOString() } // using Date.now() for testability\n\n/* eslint-disable */\n/* istanbul ignore next */\nfunction pfGlobalThisOrFallback () {\n  function defd (o) { return typeof o !== 'undefined' && o }\n  try {\n    if (typeof globalThis !== 'undefined') return globalThis\n    Object.defineProperty(Object.prototype, 'globalThis', {\n      get: function () {\n        delete Object.prototype.globalThis\n        return (this.globalThis = this)\n      },\n      configurable: true\n    })\n    return globalThis\n  } catch (e) {\n    return defd(self) || defd(window) || defd(this) || {}\n  }\n}\n/* eslint-enable */\n\nmodule.exports.default = pino\nmodule.exports.pino = pino\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}