{"ast":null,"code":"import { __values, __spread } from './_virtual/_tslib.js';\nimport { keys, flatten } from './utils.js';\nvar isLeafNode = function (stateNode) {\n  return stateNode.type === 'atomic' || stateNode.type === 'final';\n};\nfunction getChildren(stateNode) {\n  return keys(stateNode.states).map(function (key) {\n    return stateNode.states[key];\n  });\n}\nfunction getAllStateNodes(stateNode) {\n  var stateNodes = [stateNode];\n  if (isLeafNode(stateNode)) {\n    return stateNodes;\n  }\n  return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));\n}\nfunction getConfiguration(prevStateNodes, stateNodes) {\n  var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n  var prevConfiguration = new Set(prevStateNodes);\n  var prevAdjList = getAdjList(prevConfiguration);\n  var configuration = new Set(stateNodes);\n  try {\n    // add all ancestors\n    for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {\n      var s = configuration_1_1.value;\n      var m = s.parent;\n      while (m && !configuration.has(m)) {\n        configuration.add(m);\n        m = m.parent;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  var adjList = getAdjList(configuration);\n  try {\n    // add descendants\n    for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {\n      var s = configuration_2_1.value; // if previously active, add existing child nodes\n\n      if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n        if (prevAdjList.get(s)) {\n          prevAdjList.get(s).forEach(function (sn) {\n            return configuration.add(sn);\n          });\n        } else {\n          s.initialStateNodes.forEach(function (sn) {\n            return configuration.add(sn);\n          });\n        }\n      } else {\n        if (s.type === 'parallel') {\n          try {\n            for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var child = _f.value;\n              if (child.type === 'history') {\n                continue;\n              }\n              if (!configuration.has(child)) {\n                configuration.add(child);\n                if (prevAdjList.get(child)) {\n                  prevAdjList.get(child).forEach(function (sn) {\n                    return configuration.add(sn);\n                  });\n                } else {\n                  child.initialStateNodes.forEach(function (sn) {\n                    return configuration.add(sn);\n                  });\n                }\n              }\n            }\n          } catch (e_3_1) {\n            e_3 = {\n              error: e_3_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n          }\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  try {\n    // add all ancestors\n    for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {\n      var s = configuration_3_1.value;\n      var m = s.parent;\n      while (m && !configuration.has(m)) {\n        configuration.add(m);\n        m = m.parent;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  return configuration;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n  var childStateNodes = adjList.get(baseNode);\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n  if (baseNode.type === 'compound') {\n    var childStateNode = childStateNodes[0];\n    if (childStateNode) {\n      if (isLeafNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n  var stateValue = {};\n  childStateNodes.forEach(function (csn) {\n    stateValue[csn.key] = getValueFromAdj(csn, adjList);\n  });\n  return stateValue;\n}\nfunction getAdjList(configuration) {\n  var e_5, _a;\n  var adjList = new Map();\n  try {\n    for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {\n      var s = configuration_4_1.value;\n      if (!adjList.has(s)) {\n        adjList.set(s, []);\n      }\n      if (s.parent) {\n        if (!adjList.has(s.parent)) {\n          adjList.set(s.parent, []);\n        }\n        adjList.get(s.parent).push(s);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  return adjList;\n}\nfunction getValue(rootNode, configuration) {\n  var config = getConfiguration([rootNode], configuration);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction has(iterable, item) {\n  if (Array.isArray(iterable)) {\n    return iterable.some(function (member) {\n      return member === item;\n    });\n  }\n  if (iterable instanceof Set) {\n    return iterable.has(item);\n  }\n  return false; // TODO: fix\n}\nfunction nextEvents(configuration) {\n  return flatten(__spread(new Set(configuration.map(function (sn) {\n    return sn.ownEvents;\n  }))));\n}\nfunction isInFinalState(configuration, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(function (s) {\n      return s.type === 'final' && has(configuration, s);\n    });\n  }\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(function (sn) {\n      return isInFinalState(configuration, sn);\n    });\n  }\n  return false;\n}\nexport { getAdjList, getAllStateNodes, getChildren, getConfiguration, getValue, has, isInFinalState, isLeafNode, nextEvents };","map":{"version":3,"names":["__values","__spread","keys","flatten","isLeafNode","stateNode","type","getChildren","states","map","key","getAllStateNodes","stateNodes","concat","getConfiguration","prevStateNodes","e_1","_a","e_2","_b","e_3","_c","e_4","_d","prevConfiguration","Set","prevAdjList","getAdjList","configuration","configuration_1","configuration_1_1","next","done","s","value","m","parent","has","add","e_1_1","error","return","call","adjList","configuration_2","configuration_2_1","get","length","forEach","sn","initialStateNodes","_e","_f","child","e_3_1","e_2_1","configuration_3","configuration_3_1","e_4_1","getValueFromAdj","baseNode","childStateNodes","childStateNode","stateValue","csn","e_5","Map","configuration_4","configuration_4_1","set","push","e_5_1","getValue","rootNode","config","iterable","item","Array","isArray","some","member","nextEvents","ownEvents","isInFinalState","every"],"sources":["C:/PoC-FE/video-fsm-uno/node_modules/xstate/es/stateUtils.js"],"sourcesContent":["import { __values, __spread } from './_virtual/_tslib.js';\nimport { keys, flatten } from './utils.js';\n\nvar isLeafNode = function (stateNode) {\n  return stateNode.type === 'atomic' || stateNode.type === 'final';\n};\n\nfunction getChildren(stateNode) {\n  return keys(stateNode.states).map(function (key) {\n    return stateNode.states[key];\n  });\n}\n\nfunction getAllStateNodes(stateNode) {\n  var stateNodes = [stateNode];\n\n  if (isLeafNode(stateNode)) {\n    return stateNodes;\n  }\n\n  return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));\n}\n\nfunction getConfiguration(prevStateNodes, stateNodes) {\n  var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n\n  var prevConfiguration = new Set(prevStateNodes);\n  var prevAdjList = getAdjList(prevConfiguration);\n  var configuration = new Set(stateNodes);\n\n  try {\n    // add all ancestors\n    for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {\n      var s = configuration_1_1.value;\n      var m = s.parent;\n\n      while (m && !configuration.has(m)) {\n        configuration.add(m);\n        m = m.parent;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  var adjList = getAdjList(configuration);\n\n  try {\n    // add descendants\n    for (var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()) {\n      var s = configuration_2_1.value; // if previously active, add existing child nodes\n\n      if (s.type === 'compound' && (!adjList.get(s) || !adjList.get(s).length)) {\n        if (prevAdjList.get(s)) {\n          prevAdjList.get(s).forEach(function (sn) {\n            return configuration.add(sn);\n          });\n        } else {\n          s.initialStateNodes.forEach(function (sn) {\n            return configuration.add(sn);\n          });\n        }\n      } else {\n        if (s.type === 'parallel') {\n          try {\n            for (var _e = (e_3 = void 0, __values(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var child = _f.value;\n\n              if (child.type === 'history') {\n                continue;\n              }\n\n              if (!configuration.has(child)) {\n                configuration.add(child);\n\n                if (prevAdjList.get(child)) {\n                  prevAdjList.get(child).forEach(function (sn) {\n                    return configuration.add(sn);\n                  });\n                } else {\n                  child.initialStateNodes.forEach(function (sn) {\n                    return configuration.add(sn);\n                  });\n                }\n              }\n            }\n          } catch (e_3_1) {\n            e_3 = {\n              error: e_3_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n          }\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  try {\n    // add all ancestors\n    for (var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()) {\n      var s = configuration_3_1.value;\n      var m = s.parent;\n\n      while (m && !configuration.has(m)) {\n        configuration.add(m);\n        m = m.parent;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  return configuration;\n}\n\nfunction getValueFromAdj(baseNode, adjList) {\n  var childStateNodes = adjList.get(baseNode);\n\n  if (!childStateNodes) {\n    return {}; // todo: fix?\n  }\n\n  if (baseNode.type === 'compound') {\n    var childStateNode = childStateNodes[0];\n\n    if (childStateNode) {\n      if (isLeafNode(childStateNode)) {\n        return childStateNode.key;\n      }\n    } else {\n      return {};\n    }\n  }\n\n  var stateValue = {};\n  childStateNodes.forEach(function (csn) {\n    stateValue[csn.key] = getValueFromAdj(csn, adjList);\n  });\n  return stateValue;\n}\n\nfunction getAdjList(configuration) {\n  var e_5, _a;\n\n  var adjList = new Map();\n\n  try {\n    for (var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()) {\n      var s = configuration_4_1.value;\n\n      if (!adjList.has(s)) {\n        adjList.set(s, []);\n      }\n\n      if (s.parent) {\n        if (!adjList.has(s.parent)) {\n          adjList.set(s.parent, []);\n        }\n\n        adjList.get(s.parent).push(s);\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  return adjList;\n}\n\nfunction getValue(rootNode, configuration) {\n  var config = getConfiguration([rootNode], configuration);\n  return getValueFromAdj(rootNode, getAdjList(config));\n}\n\nfunction has(iterable, item) {\n  if (Array.isArray(iterable)) {\n    return iterable.some(function (member) {\n      return member === item;\n    });\n  }\n\n  if (iterable instanceof Set) {\n    return iterable.has(item);\n  }\n\n  return false; // TODO: fix\n}\n\nfunction nextEvents(configuration) {\n  return flatten(__spread(new Set(configuration.map(function (sn) {\n    return sn.ownEvents;\n  }))));\n}\n\nfunction isInFinalState(configuration, stateNode) {\n  if (stateNode.type === 'compound') {\n    return getChildren(stateNode).some(function (s) {\n      return s.type === 'final' && has(configuration, s);\n    });\n  }\n\n  if (stateNode.type === 'parallel') {\n    return getChildren(stateNode).every(function (sn) {\n      return isInFinalState(configuration, sn);\n    });\n  }\n\n  return false;\n}\n\nexport { getAdjList, getAllStateNodes, getChildren, getConfiguration, getValue, has, isInFinalState, isLeafNode, nextEvents };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}